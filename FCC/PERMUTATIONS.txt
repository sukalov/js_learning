function permAlone(str) {
  let allPermutes = permutations(str.split(''))
  let result = allPermutes.reduce((sum, word) => {
    let foundRepeat = false
    for (let l = 1; l < word.length; l++) {
      if (word[l] == word[l-1]) {foundRepeat = true; break}
    }
    if (!foundRepeat) sum += 1
    return sum
    }, 0)
    return result
}

function permutations(arr) {
  const allPermutations = [];
  function permute(arr, newPermutation = []) {
    // console.log('\n________________________________________________')
    // console.log(arr, newPermutation, '======', allPermutations.length, allPermutations[allPermutations.length-1] ?? [])
    if (arr.length === 0) {
      allPermutations.push(newPermutation);
    } else {
      for (let i = 0; i < arr.length; i++) {
        let curr = arr.slice();
        let next = curr.splice(i, 1);
        // console.log(curr.slice(), newPermutation.concat(next))
        permute(curr.slice(), newPermutation.concat(next));
      }
    }
  }

  permute(arr);
  return allPermutations;
}

// console.log(first('abc'));
console.log(permAlone("abcdefa"))


/* 

permute array
    if array is of size 2
       return first and second element as new array
       return second and first element as new array
    else
        for each element in array
            new subarray = array with excluded element
            return element + permute subarray

*/

// function second(arr) {
//   let arr2 = [0,0]
//   for (let i = arr.length - 1; i >= 0; i--){ // 1. main loop from LAST to FIRST
//   console.log(arr2)
//     let arr3 = [0]
//     for (let j = 0; j < arr2.length; j++) { // 2. each iteration of main we loop over previous variants
//       for (let letter = arr2[j].length; letter > 0; letter-- ) {
//         const el = arr2.slice(0, letter).concat([arr[i]], arr2.slice(letter));
//         arr3.push(el)
//       }
//     }
//     arr2.push(arr3)
//   }
// return arr2
// }


/*

abcd

[d]

[cd dc]

[bcd cbd cdb bdc dbc dcb]




 */